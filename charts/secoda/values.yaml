# Default values for secoda.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

services:
  api:
    image:
      registry: ""
      name: "on-premise-api"
      pullPolicy: ""
      tag: ""
    command: ["/bin/sh"]
    args: ["-c", "./server.sh"]
    env: []
    ports:
      - containerPort: 5007
    resources:
      requests:
        memory: 2048Mi
        cpu: 1024m
      limits:
        memory: 2048Mi
        cpu: 1024m
    readinessProbe:
      tcpSocket:
        port: 5007
    securityContext: {}
  
  worker:
    image:
      registry: ""
      name: "on-premise-api"
      pullPolicy: ""
      tag: ""
    command: ["/bin/sh"]
    args: ["-c", "./worker.sh"]
    env: []
    ports:
      - containerPort: 5007
    resources:
      requests:
        memory: 2048Mi
        cpu: 1024m
      limits:
        memory: 4096Mi
        cpu: 2048m
    readinessProbe:
      tcpSocket:
        port: 5007
    securityContext: {}

  frontend:
    image:
      registry: ""
      name: "on-premise-frontend"
      pullPolicy: ""
      tag: ""
    args: []
    env: []
    ports:
      - name: https
        containerPort: 443 
    resources:
      requests:
        memory: 1024m
        cpu: 512m
    livenessProbe:
      tcpSocket:
        port: 443
      initialDelaySeconds: 30
      timeoutSeconds: 5
    readinessProbe: {}
    securityContext: {}

  auth:
    image:
      registry: ""
      name: "on-premise-auth"
      pullPolicy: ""
      tag: ""
    env:
      - name: KC_DB_USERNAME
        value: postgres
      - name: KC_DB
        value: postgres
      - name: KEYCLOAK_ADMIN
        value: admin
    ports:
      - containerPort: 8080
      - containerPort: 8443
    args: 
      - start --auto-build --http-relative-path /auth --hostname-strict false --proxy edge --spi-login-protocol-openid-connect-legacy-logout-redirect-uri=true --import-realm
    resources:
      requests:
        memory: 2048Mi
        cpu: 512m
      limits:
        memory: 3072Mi
        cpu: 512m
    livenessProbe: {}
    readinessProbe:
      httpGet:
        path: /auth/realms/secoda/.well-known/openid-configuration
        port: 8080
      initialDelaySeconds: 90
      timeoutSeconds: 5
      periodSeconds: 10
    securityContext: {}

  redis:
    image:
      registry: ""
      name: "redis"
      pullPolicy: ""
      tag: "6.2"
    env: []
    ports:
      - containerPort: 6379
    command: ["redis-server"]
    resources:
      requests:
        memory: 1024Mi
        cpu: 512m
      limits:
        memory: 1024Mi
        cpu: 512m
    livenessProbe: {}
    readinessProbe:
      tcpSocket:
        port: 6379
    securityContext: {}

global:
  image:
    registry: "secoda"
    pullPolicy: IfNotPresent
    tag: "4"
  env: []
  resources: {}
  securityContext: {}
    # allowPrivilegeEscalation: false
datastores:
  secoda:
    # if set, will use an existing secret otherwise a secret will be created with the values
    existing_secret: ""
    admin_password: "" # We suggest using `openssl rand -hex 20 | cut -c 1-16` to fill this value.
    secret_key: "" # You must use `uuidgen | tr '[:upper:]' '[:lower:]'` to fill this value.
    private_key: "" # openssl genrsa -out secoda.private.pem 2048 && echo "Copy the following:" && cat secoda.private.pem | base64
    public_key: "" # openssl rsa -in secoda.private.pem -pubout > secoda.public.pem && echo "Copy the following:" && cat secoda.public.pem | base64
    db_host: "" # this should be similar to `rds.amazonrds.com` or an ip address.
    db_password: "" # this should be alphanumeric, or it may break connection strings.

persistence:
  enabled: false

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

service:
  type: ClusterIP

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

nodeSelector: {}
tolerations: []
affinity: {}
dnsConfig: {}
annotations: {}
