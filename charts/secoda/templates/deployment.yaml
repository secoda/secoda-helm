{{ $globals := .Values.global -}}
{{ $datastores := .Values.datastores -}}
{{ $chartVersion := .Chart.AppVersion -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "secoda.fullname" . }}
  annotations: 
    {{- toYaml .Values.annotations | nindent 4 }}
  labels:
    {{- include "secoda.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      {{- include "secoda.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "secoda.selectorLabels" . | nindent 8 }}
    spec:
      imagePullSecrets:
        - name: secoda-dockerhub
      serviceAccountName: {{ include "secoda.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      {{- range $key, $val := .Values.services }}
        - name: {{ $key }}
          {{- with (merge $globals.securityContext $val.securityContext) }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: "{{ coalesce $val.image.registry $globals.image.registry }}/{{ coalesce $val.image.name $globals.image.name }}:{{ coalesce $val.image.tag $globals.image.tag $chartVersion }}"
          imagePullPolicy: {{ coalesce $val.image.pullPolicy $globals.image.pullPolicy }}
          {{- with $val.command }}
          command: {{ . }}
          {{ end }}
          {{- with  coalesce $val.args }}
          args: {{ . }}
          {{ end }}
          env: 
          {{- with (compact (concat $globals.env $val.env)) }}
             {{- toYaml . | nindent 10 }}
          {{ end }}
          - name: APISERVICE_DATABASE_CONNECTION
            valueFrom:
              secretKeyRef:
                name: {{ coalesce $datastores.secoda.existing_secret "secoda-keycloak" }}
                key: APISERVICE_DATABASE_CONNECTION
          - name: APISERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: {{ coalesce $datastores.secoda.existing_secret "secoda-keycloak" }}
                key: KEYCLOAK_SECRET
          - name: KC_DB_URL
            valueFrom:
              secretKeyRef:
                name: {{ coalesce $datastores.secoda.existing_secret "secoda-keycloak" }}
                key: KC_DB_URL
          - name: KC_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ coalesce $datastores.secoda.existing_secret "secoda-keycloak" }}
                key: KC_DB_PASSWORD
          - name: KEYCLOAK_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ coalesce $datastores.secoda.existing_secret "secoda-keycloak" }}
                key: KEYCLOAK_ADMIN_PASSWORD
          - name: KEYCLOAK_SECRET
            valueFrom:
              secretKeyRef:
                name: {{ coalesce $datastores.secoda.existing_secret "secoda-keycloak" }}
                key: KEYCLOAK_SECRET
          - name: PUBLIC_KEY
            valueFrom:
              secretKeyRef:
                name: {{ coalesce $datastores.secoda.existing_secret "secoda-keycloak" }}
                key: PUBLIC_KEY
          - name: PRIVATE_KEY
            valueFrom:
              secretKeyRef:
                name: {{ coalesce $datastores.secoda.existing_secret "secoda-keycloak" }}
                key: PRIVATE_KEY
          {{- if .Values.sql_proxy.enabled -}}
          - name: cloud-sql-proxy
            # It is recommended to use the latest version of the Cloud SQL proxy
            # Make sure to update on a regular schedule!
            image: gcr.io/cloudsql-docker/gce-proxy:1.31.1 # make sure the use the latest version
            command:
              - /cloud_sql_proxy

              # If connecting from a VPC-native GKE cluster, you can use the
              # following flag to have the proxy connect over private IP
              # - "-ip_address_types=PRIVATE"

              # By default, the proxy will write all logs to stderr. In some
              # environments, anything printed to stderr is consider an error. To
              # disable this behavior and write all logs to stdout (except errors
              # which will still go to stderr), use:
              - -log_debug_stdout

              # Replace DB_PORT with the port the proxy should listen on
              # Defaults: MySQL: 3306, Postgres: 5432, SQLServer: 1433
              - -instances={{ .Values.sql_proxy.db_name }}=tcp:5432
            securityContext:
              # The default Cloud SQL proxy image runs as the
              # "nonroot" user and group (uid: 65532) by default.
              runAsNonRoot: true
            # You should use resource requests/limits as a best practice to prevent
            # pods from consuming too many resources and affecting the execution of
            # other pods. You should adjust the following values based on what your
            # application needs. For details, see
            # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
            resources:
              requests:
                # The proxy's memory use scales linearly with the number of active
                # connections. Fewer open connections will use less memory. Adjust
                # this value based on your application's requirements.
                memory: 1Gi
                # The proxy's CPU use scales linearly with the amount of IO between
                # the database and the application. Adjust this value based on your
                # application's requirements.
                cpu:    1
          {{- end }}
          {{- with $val.ports }}
          ports: 
           {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with $val.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with $val.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml $val.resources | nindent 12 }}
      {{- end }}
      {{- with .Values.dnsConfig }}
      dnsConfig:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
